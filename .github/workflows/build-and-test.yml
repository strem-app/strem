name: "Build, Test, Publish"
on: [push]

env:
  BuildVersion: '0.11.${{github.run_number}}'

jobs:
  build-and-test:
    name: "Build & Test App"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET 9.0
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 9.0.x
      - name: Run Build Script
        shell: pwsh
        run: |
          ./build.ps1 --buildNo='${{ env.BuildVersion }}' --target='build-and-test'
      - name: Test Report
        uses: dorny/test-reporter@v1
        with:
          name: Unit Test Summary
          path: "dist/*.trx"
          reporter:  dotnet-trx
      - name: Code Coverage Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: "dist/*.xml"
          badge: true
          output: both
          format: markdown
          indicators: true
      - name: Add Coverage Summary
        run: cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY  
      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: code-coverage-results.md
      
  
  create-release:
    name: "Create Release For Tags"
    runs-on: windows-latest
    needs: [ build-and-test ]
    steps:
      - name: Create Release
        id: create_release
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
  
  package-app-windows:
    name: "Package App - Windows"
    needs: [ build-and-test, create-release ]
    runs-on: windows-latest
    steps:      
      - name: "Build Application"
        uses: ./.github/actions/build-app
        with:
          platform: 'win-x64'
          version: '${{env.BuildVersion}}'
      - name: Release To WinGet
        if: startsWith(github.event.ref, 'refs/tags/')    
        uses: vedantmgoyal9/winget-releaser@main
        with:
          identifier: Strem.App
          max-versions-to-keep: 5
          version: '${{ env.BuildVersion }}'
          release-repository: 'strem'
          release-tag: ${{ github.ref_name }}
          installers-regex: '\.zip$'
          token: ${{ secrets.WINGET_TOKEN }}
          
  package-app-linux:
    name: "Package App - Linux"
    needs: [ build-and-test, create-release ]
    runs-on: windows-latest
    steps:
      - name: "Build Application"
        uses: ./.github/actions/build-app
        with:
          platform: 'linux-x64'
          version: '${{env.BuildVersion}}'
  
  package-app-osx:
    name: "Package App - Linux"
    needs: [ build-and-test, create-release ]
    runs-on: windows-latest
    steps:
      - name: "Build Application"
        uses: ./.github/actions/build-app
        with:
          platform: 'linux-x64'
          version: '${{env.BuildVersion}}'
          
          
  package-libs:
    name: "Package Libs"
    runs-on: windows-latest
    needs: [build-and-test]
    steps:
      - uses: actions/checkout@v3
      - name: Package App Script
        shell: pwsh
        run: ./build.ps1 --buildNo='${{ env.BuildVersion }}' --target='publish-libs'
      - name: Publish Editor Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Nuget Packages
          path: "**/*.nupkg"
      - name: Publish To Nuget
        if: startsWith(github.event.ref, 'refs/tags/')
        run: dotnet nuget push "**/*.nupkg" -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json