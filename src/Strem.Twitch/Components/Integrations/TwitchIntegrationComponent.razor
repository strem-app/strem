@using System.Reactive.Disposables
@using System.Reactive.Linq
@using Strem.Core.Events.Bus
@using Strem.Core.Extensions
@using Strem.Core.State
@using Strem.Twitch.Events.OAuth
@using Strem.Twitch.Extensions
@using Strem.Twitch.Services.Client
@using Strem.Twitch.Services.OAuth
@using Strem.Twitch.Types
@using Strem.Twitch.Variables
@using TwitchLib.Client.Interfaces

@inject ITwitchOAuthClient TwitchOAuthClient
@inject IAppState AppState
@inject IEventBus EventBus

@implements IDisposable

@inject ITwitchClient TwitchClient
@inject IObservableTwitchEventSub TwitchEventSub
@inject IObservableTwitchClient ObservableTwitchClient

<div class="columns">
    <div class="column">
        <label class="label">Connected Account</label>
        <div class="field has-addons">
            <div class="control is-expanded">
                <input class="input" type="text" placeholder="Account Not Linked" value="@Username" disabled/>
            </div>
            <div class="control">
                @if (IsTwitchAccountLinked && !HavePermissionsChanged)
                {
                    <a class="button is-danger" @onclick="DisconnectFromTwitch">Disconnect From Twitch</a>
                }
                else if (IsTwitchAccountLinked && HavePermissionsChanged)
                {
                    <a class="button is-warning" @onclick="ConnectToTwitch">Request New Permissions</a>
                }
                else
                {
                    <a class="button is-success" @onclick="ConnectToTwitch">Connect To Twitch</a>
                }
            </div>
        </div>
    </div>
</div>

<label class="label">Requested Privilages</label>
<TwitchScopes ExistingScopes="CurrentScopes" OnScopesChanged="RequestNewScopeAccess"></TwitchScopes>

<label class="label">Twitch Connection Information</label>
<div class="box">
    <div class="columns">
        <div class="column is-one-third">
            <div class="field">
                <label class="label">Chat Channels Joined</label>
                <div class="control">
                    <div class="tags">
                        @if (!TwitchEventSub.IsConnected) { <span class="tag is-danger">Not Connected</span> }
                        @foreach (var joinedChannel in TwitchClient.JoinedChannels)
                        {
                            <span class="tag is-success">@joinedChannel.Channel</span>
                        }
                    </div>
                </div>
            </div>
        </div>
        <div class="column is-two-thirds">
            <label class="label">EventSub Subscriptions</label>
            <div class="field is-grouped is-grouped-multiline">
                @if (!TwitchEventSub.IsConnected)
                {
                    <span class="tag is-danger">Not Connected</span>
                }

                @foreach (var channelSubs in TwitchEventSub.Subscriptions)
                {
                    foreach (var subscription in channelSubs.Value)
                    {
                        <div class="control">
                            <div class="tags has-addons">
                                <span class="tag is-success">@channelSubs.Key</span>
                                <span class="tag is-info">@subscription</span>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>

@code {
    
    private CompositeDisposable _subs = new();
    
    public string Username { get; set; }
    public bool IsTwitchAccountLinked { get; set; }
    public bool HavePermissionsChanged { get; set; }
    public string[] CurrentScopes { get; set; } = Array.Empty<string>();
    public string[] NewScopes { get; set; } = Array.Empty<string>();

    public bool CanStartTwitchChat => IsTwitchAccountLinked && AppState.HasTwitchScope(ChatScopes.ReadChat);

    protected override async Task OnInitializedAsync()
    {
        IsTwitchAccountLinked = AppState.HasTwitchAccessToken();
        Username = AppState.AppVariables.Get(TwitchVars.Username);

        if (IsTwitchAccountLinked)
        {
            CurrentScopes = AppState.GetTwitchScopes();
            NewScopes = CurrentScopes.ToArray();
        }

        AppState.AppVariables.OnVariableChanged
            .Where(x => x.Key == TwitchVars.Username)
            .Subscribe(x =>
            {
                Username = AppState.AppVariables.Get(TwitchVars.Username);
                InvokeAsync(StateHasChanged);
            })
            .AddTo(_subs);

        ObservableTwitchClient.OnConnected
            .Subscribe(x => InvokeAsync(StateHasChanged))
            .AddTo(_subs);
        
        ObservableTwitchClient.OnDisconnected
            .Subscribe(x => InvokeAsync(StateHasChanged))
            .AddTo(_subs);
        
        EventBus.Receive<TwitchOAuthSuccessEvent>()
            .Subscribe(x =>
            {
                IsTwitchAccountLinked = true;
                InvokeAsync(StateHasChanged);
            })
            .AddTo(_subs);        
        
        EventBus.Receive<TwitchOAuthRevokedEvent>()
            .Subscribe(x =>
            {
                IsTwitchAccountLinked = false;
                Username = string.Empty;
                InvokeAsync(StateHasChanged);
            })
            .AddTo(_subs);
    }

    public void ConnectToTwitch()
    {
        TwitchOAuthClient.StartAuthorisationProcess(NewScopes);
    }

    public void DisconnectFromTwitch()
    {
        TwitchOAuthClient.RevokeToken();
    }

    public void AttemptChatConnect()
    {
        if (!TwitchClient.IsConnected)
        { TwitchClient.ConnectOrRefresh(AppState); }
    }
    
    public void RequestNewScopeAccess(string[] newScopes)
    {
        NewScopes = newScopes;
        HavePermissionsChanged = true;
    }

    public void Dispose()
    {
        _subs?.Dispose();  
    } 
}