@using Strem.Infrastructure.Extensions
@using Strem.Core.Events.Bus
@using Strem.Core.Extensions
@using Strem.Portals.Data
@using Strem.Portals.Data.Overrides
@using Strem.Portals.Events
@using Strem.Portals.Extensions
@using System.Reactive.Disposables
@using System.Reactive.Linq
@using Microsoft.JSInterop
@using Strem.Core.Services.UI.Modal
@using Strem.Core.Services.UI.Notifications
@using Strem.Portals.Events.Base
@using Strem.Portals.Services.Stores
@using Strem.Portals.Types
@using Strem.Todos.Data
@using Strem.Todos.Events
@using Strem.Todos.Events.Base
@using Strem.Todos.Services.Stores

@implements IDisposable

@inject IJSRuntime Js

@if (UserHasAccess)
{
    <section class="hero is-dark is-fullheight">
        <div class="hero-body is-align-items-stretch">
            <div class="container is-fluid">
                <div class="field is-grouped">
                    <div class="control">
                        <h3 class="title is-3">@Portal.Name</h3>
                    </div>
                </div>
                <Accordion Title="Portal Viewer Settings">
                    <div class="box">
                        <div class="columns">
                            <div class="column is-three-quarters">
                                <div class="field">
                                    <label class="label">Zoom Level</label>
                                    <div class="control">
                                        <nav class="level">
                                            <div class="level-item has-text-left">
                                                <div>
                                                    <span class="tag">50%</span>
                                                </div>
                                            </div>
                                            <div class="level-item has-text-centered">
                                                <div>
                                                    <span class="tag">100%</span>
                                                </div>
                                            </div>
                                            <div class="level-item has-text-right">
                                                <div>
                                                    <span class="tag">150%</span>
                                                </div>
                                            </div>
                                        </nav>
                                    </div>
                                    <div class="control">
                                        <SliderInput Min="50" Max="150" @bind-Value="ZoomRate" ValueChangedWithPrevious="OnZoomChanged"/>
                                    </div>
                                </div>
                            </div>
                            <div class="column is-one-quarter has-text-right">
                                <div class="field">
                                    <div class="control">
                                        <button id="no-sleep-button" class="button is-primary" @ref="noSleepElement">Stop Device Sleeping</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </Accordion>
                <div class="columns">
                    <div class="column">
                        <div class="portal-page portal-viewer box">
                            <div class="is-flex is-flex-direction-row is-flex-wrap-wrap">
                                @for (var i = 0; i < Portal.ElementGridSize; i++)
                                {
                                    var possibleButton = GetButtonAt(i);
                                    if (possibleButton == null)
                                    {
                                        <PlaceholderButton />
                                    }
                                    else
                                    {
                                        <span id="@possibleButton.Id">
                                            @if (possibleButton.ElementType == GridElementType.Slider)
                                            {
                                                <PortalSlider ElementId="possibleButton.Id" ElementData="possibleButton" ElementStyles="ElementRuntimeStyles.GetButtonStyles(Portal.Id, possibleButton.Id)"
                                                        OnValueChanged="x => NotifySliderValueChanged(possibleButton, x.Value)" />
                                            }
                                            else
                                            {
                                                <PortalButton ElementId="possibleButton.Id" ElementStyles="ElementRuntimeStyles.GetButtonStyles(Portal.Id, possibleButton.Id)"
                                                          OnClick="() => NotifyButtonPressed(possibleButton)"/>
                                            }
                                        </span>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                    @if (Portal.ShowTodos)
                    {
                        var filteredTodos = GetFilteredTodos().ToArray();
                        if (filteredTodos.Length > 0)
                        {
                            <div class="column is-one-third todo-section">
                                <div class="box">
                                    <PagedContent Data="filteredTodos" ElementsPerPage="5" Context="Todo" OrderBy="x => x.ExpiryDate">
                                        <TodoEntry Todo="Todo" OnTodoComplete="OnTodoCompleted"></TodoEntry>
                                    </PagedContent>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </section>
}

<ModalContent Id="portal-password-modal" @ref="PortalPasswordModal">
  <PortalPasswordModal RequestAccess="OnRequestedAccess"></PortalPasswordModal>
</ModalContent>

@code {
    [CascadingParameter]
    public IModalInteractionService ModalService { get; set; }
    public ModalElementReference PortalPasswordModal { get; set; }
    
    [Parameter]
    public Guid PortalId { get; set; }
    public PortalData Portal { get; set; }
    public bool UserHasAccess { get; set; }
    
    public GridElementRuntimeStyles ElementRuntimeStyles { get; set; }
    public IEventBus EventBus { get; set; }
    public ITodoStore TodoStore { get; set; }
    public INotifier Notifier { get; set; }
    public ILogger Logger { get; set; }

    public ElementReference noSleepElement { get; set; }

    public int ZoomRate { get; set; } = 100;

    private CompositeDisposable _subs = new();
    
    protected override async Task OnInitializedAsync()
    {
        EventBus = this.GetService<IEventBus>()!;
        ElementRuntimeStyles = this.GetService<GridElementRuntimeStyles>()!;
        TodoStore = this.GetService<ITodoStore>()!;
        Logger = this.GetService<ILogger<PortalViewer>>()!;
        Notifier = this.GetService<INotifier>()!;
        
        var portalStore = this.GetService<IPortalStore>()!;
        Portal = portalStore.Get(PortalId);

        if (Portal == null)
        {
            Logger.Error($"Unable to find portal for {PortalId}");
            return;
        }

        EventBus.ReceiveAs<PortalEvent, PortalChangedEvent, PortalCreatedEvent, PortalRemovedEvent, PortalElementChangedEvent>()
            .Where(x => x.PortalId == PortalId)
            .Subscribe(x => InvokeAsync(StateHasChanged))
            .AddTo(_subs);
        
        EventBus.ReceiveAs<TodoEvent, TodoCreatedEvent, TodoRemovedEvent>()
            .Subscribe(x => InvokeAsync(StateHasChanged))
            .AddTo(_subs);

        if (!string.IsNullOrEmpty(Portal.Password))
        { UserHasAccess = false; }
        else
        { UserHasAccess = true; }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (UserHasAccess)
            { await SetupSleepButton(); }
            else
            { ModalService.ShowModal(PortalPasswordModal.Reference); }
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    public async Task OnRequestedAccess(string password)
    {
        if(Portal.Password.Equals(password))
        {
            UserHasAccess = true;
            ModalService.CloseModal();
            await InvokeAsync(StateHasChanged);
            await Js.InvokeVoidAsync("showNotification", "Login Successful", "is-success", 2000);
            SetupSleepButton();
            Logger.Information($"Login Succeeded for {Portal.Name}");
            return;
        }
        
        await Js.InvokeVoidAsync("showNotification", "Login Failed", "is-danger", 2000);
        Logger.Error($"Failed login for {Portal.Name}");
    }
    
    public async Task SetupSleepButton()
    { await Js.InvokeVoidAsync("setNoSleepButton", noSleepElement); }
    
    public IEnumerable<TodoData> GetFilteredTodos()
    {
        if (Portal.TodoTags.Count == 0)
        { return TodoStore.Data; }

        return TodoStore.Data
            .Where(x => x.Tags.All(tag => Portal.TodoTags.Contains(tag, StringComparer.OrdinalIgnoreCase)));
    }

    public async Task NotifyButtonPressed(GridElementData gridElementData)
    {
        EventBus.PublishAsync(new PortalElementPressedEvent(Portal.Id, Portal.Name, gridElementData.Id, gridElementData.Name));
        await Js.InvokeVoidAsync("animateElementById", gridElementData.Id, "pulse", "1s");
    }
    
    public void NotifySliderValueChanged(GridElementData gridElementData, int value)
    { EventBus.PublishAsync(new PortalSliderValueChangedEvent(Portal.Id, Portal.Name, gridElementData.Id, gridElementData.Name, value)); }
    
    public void Dispose()
    {
        _subs.Dispose();
    }

    private void OnTodoCompleted(TodoData todoData)
    {
        TodoStore.Remove(todoData.Id);
        StateHasChanged();
    }
    
    private GridElementData? GetButtonAt(int gridIndex)
    { return Portal.Elements.FirstOrDefault(x => x.GridIndex == gridIndex); }
    
    public async Task OnZoomChanged(ValueWithPrevious<int> values)
    { await Js.InvokeVoidAsync("setZoom", values.New);}
}