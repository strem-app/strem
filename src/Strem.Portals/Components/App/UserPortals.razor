@using Strem.Core.Extensions
@using System.Reactive.Disposables
@using Strem.Core.Services.Browsers.File
@using Strem.Core.Services.UI.Modal
@using Strem.Core.Services.UI.Notifications
@using Strem.Portals.Data
@using Strem.Portals.Data.Overrides
@using Strem.Portals.Extensions
@using Strem.Portals.Services.Data
@using Strem.Portals.Services.Stores

@inject IPortalStore PortalStore;
@inject INotifier Notifier;
@inject IFileBrowser FileBrowser;
@inject IPortalImporter PortalImporter;
@inject IPortalExporter PortalExporter;
@inject GridElementRuntimeStyles GridElementRuntimeStyles 

@implements IDisposable

<div class="box">
  
  <div class="field">
    <div class="control">
      <button class="button is-success is-leveled" @onclick="() => ModalService.ShowModal(CreatePortalModal.Reference)">
        <span class="icon is-small">
          <i class="fas fa-globe"></i>
        </span>
        <span>Add Portal</span>
      </button>
    </div>
  </div>
  
  
  <Accordion Title="More Actions" HeaderClasses="is-info">
    <div class="field">
        <div class="control">
          <button class="button is-primary is-leveled" @onclick="ImportPortals">
            <span class="icon is-small">
              <i class="fas fa-file-import"></i>
            </span>
            <span>Import Portals</span>
          </button>
        </div>
      </div>
      
      <div class="field">
        <div class="control">
          <button class="button is-primary is-leveled" @onclick="() => ModalService.ShowModal(ExportPortalsModal.Reference)">
            <span class="icon is-small">
              <i class="fas fa-file-export"></i>
            </span>
            <span>Export Portals</span>
          </button>
        </div>
      </div>
      
      @if (SelectedPortal != null)
      {
        <div class="field">
          <div class="control">
              <button class="button is-danger is-leveled" @onclick="() => ModalService.ShowModal(ConfirmDeleteModal.Reference)">
                <span class="icon is-">
                  <i class="fas fa-globe"></i>
                </span>
                <span>Delete Current Flow</span>
              </button>
          </div>
        </div>
      }
  </Accordion>

  <aside class="menu portal-menu">
    <p class="menu-label">
      <span>Portals</span>
    </p>
    <ul class="menu-list">
      @foreach (var portal in PortalStore.Data)
      {
        <li>
          <a class="is-portal @(SelectedPortal?.Id == portal.Id ? "is-active" : "")"
             @onclick="() => SelectPortal(portal)">@portal.Name</a>
        </li>
      }
    </ul>
  </aside>
</div>

<ModalContent Id="create-portal-modal"  @ref="CreatePortalModal">
  <PortalCreator OnPortalCreated="OnPortalCreated" OnCancelled="ModalService.CloseModal"></PortalCreator>
</ModalContent>

<ModalContent Id="export-portal-modal" @ref="ExportPortalsModal">
  <PortalExportModal OnRequestExports="OnRequestedPortalExport" OnCancelled="ModalService.CloseModal"></PortalExportModal>
</ModalContent>

<ModalContent Id="confirm-portal-deletion-modal" @ref="ConfirmDeleteModal">
    @if (SelectedPortal != null)
    {
      <ConfirmDeletion DeletingName="@SelectedPortal.Name" OnDeletion="OnDeleteCurrentPortal" OnCancelled="ModalService.CloseModal"></ConfirmDeletion>
    }
</ModalContent>

@code {
  [CascadingParameter]
  public IModalInteractionService ModalService { get; set; }
  
  [Parameter] 
  public EventCallback<PortalData> OnPortalSelected { get; set; }

  public ModalElementReference ConfirmDeleteModal { get; set; }
  public ModalElementReference CreatePortalModal { get; set; }
  public ModalElementReference ExportPortalsModal { get; set; }
  
  public PortalData? SelectedPortal { get; set; }

  private CompositeDisposable _subs = new();

  public void OnPortalCreated(PortalData newPortal)
  {
    PortalStore.Add(newPortal);
    GridElementRuntimeStyles.RefreshStylesFor(newPortal);
    
    SelectPortal(newPortal);
    ModalService.CloseModal();
  }
  
  public void SelectPortal(PortalData? selectedPortal)
  {
    SelectedPortal = selectedPortal;
    OnPortalSelected.InvokeAsync(selectedPortal);
  }

  private void OnDeleteCurrentPortal()
  {
    if (!PortalStore.Remove(SelectedPortal?.Id ?? Guid.Empty)){ return; }
    Notifier.ShowNotification($"Portal '{SelectedPortal.Name}' Has Been Deleted", "is-danger");
    SelectPortal(null);
    ModalService.CloseModal();
    InvokeAsync(StateHasChanged);
  }
  
  public void Dispose()
  { _subs?.Dispose(); }

  private async Task OnRequestedPortalExport(IEnumerable<Guid> flowIds)
  {
    var filePath = FileBrowser.BrowseToSaveJsonFile();
    if(string.IsNullOrEmpty(filePath)) { return; }
    
    var flowData = PortalExporter.Export(flowIds);
    if (string.IsNullOrEmpty(flowData))
    {
      await Notifier.ShowNotification("Failed Exporting Portals, Check Logs", "is-danger");
      return;
    }
    
    await File.WriteAllTextAsync(filePath, flowData);
    await Notifier.ShowNotification("Exported Portals Successfully");
    ModalService.CloseModal();
  }

  private async Task ImportPortals()
  {
    var filePath = FileBrowser.BrowseToOpenJsonFile();
    if(string.IsNullOrEmpty(filePath)) { return; }

    var content = await File.ReadAllTextAsync(filePath);
    var flowsImported = PortalImporter.Import(content);
    
    if (flowsImported == 0)
    {
      await Notifier.ShowNotification("No Portals Imported, Check Logs", "is-danger");
      return;
    }
    
    await Notifier.ShowNotification($"Imported {flowsImported} Portals Successfully");
  }

}